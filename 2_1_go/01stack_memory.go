package main

import "fmt"

func main() {
	// 指针就是地址
	//指针变量就是存储地址的变量
	var a int = 1   // 这行代码，生成了开辟了2块空间，一块存a的地址，一块存a的内容
	var p *int = &a // 这行代码，开辟了2块空间，一块存p的地址，一块存p的内容，其中p的内容就是a的地址
	fmt.Println(*p) // *p 的*意思是取值运算符，为了区分，一般会叫做间接引用，或者叫做解引用

	// 栈帧： 用来给函数运行提供空间，取内容于stack上。当函数调用时，产生栈帧，函数调用结束，释放栈帧。

	// 栈帧存储：1 局部变量。 2 形参。形参与局部变量存储地位等同。 3 内存字段描述值。

	// 栈顶指针和栈基指针在一开始在同一个位置，这个位置由内存字段描述值进行记录。
	// 在一个程序运行的时候，会把main入口函数先压入此处，操作系统的做法是把栈顶指针移到main函数的尾部也就是结束标致处，就完成了栈顶移动，在这栈基和栈顶之间的这一块空间就是栈帧。
	// 当main函数中有新函数时，栈基指针和栈顶指针会移动到新函数的首部和尾部，不过main函数在调用新函数时，会先记录自己在新函数执行的时候的栈基指针和栈顶指针的值，在新函数执行完毕后，
	// main函数会把自己以前保存的栈基指针和栈顶指针的值给操作系统，把这俩指针还放到自己的main身上
	// 内存中，分区为
	/*user区：.text(代码区)
			.rodata(只读数据区) -- 常量
			.data(数据区)       -- 全局有值变量
			.bss(未初始化数据区) --全局未初始化变量
			heap(堆)            --复合类型
			stack(栈)           --基本类型，以及函数等
	kernel区
	*/

}
